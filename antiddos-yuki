#!/usr/bin/env bash
# Script written to protect Linux servers.

# For best results, install fail2ban.
# Enjoy! Made by yuki with love <3.

# --------------------------------

# RootCheck
if [ "$(whoami)" != "root" ]; then
	printf "${BRed}[ERROR] This script must be run as root.\n"
	tput sgr0
	exit 255
fi

# --------------------------------

. config.sh

# Flush all rules.
"$NFT" flush ruleset
"$NFT" add table filter

# Delete the "blacklist" ip set.
"$IPS" destroy blacklist

# Backup sysctl.conf.
# It's located in /etc.
cp /etc/sysctl.conf{,.backup}

# --------------------------------

# Set input default policy to DROP.
# Drop policy swiftly deals with any unwanted traffic.
"$IP" -P INPUT DROP

# Allow the local interface.
"$IP" -A INPUT -i lo -s 127.0.0.0/8 -j ACCEPT

# Allow established and related connections.
"$IP" -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Allow SSH.
"$IP" -A INPUT -p tcp --dport "$SSH" -j ACCEPT

# --------------------------------
# Firewall ruleset.

# To mitigate SYN/SYN-ACK/ACK/ACK-PSH/RST/FIN floods, restrict the number of SYN/SYN-ACK/ACK/ACK-PSH/RST/FIN packets per second (PPS).
# ----------------------------------------------------------------
mitigate_tcp_flood "--syn" "$SPL" 5 "synflood" "SYN LIMIT"
mitigate_tcp_flood "--tcp-flags ACK ACK" "$APL" 2 "ackflood" "ACK LIMIT"
mitigate_tcp_flood "--tcp-flags SYN,ACK SYN,ACK" "$SAPL" 2 "synackflood" "SYNACK LIMIT"
mitigate_tcp_flood "--tcp-flags ACK,PSH ACK,PSH" "$APPL" 2 "ackpshflood" "ACKPSH LIMIT"
mitigate_tcp_flood "--tcp-flags RST RST" "$RPL" 2 "rstflood" "RST LIMIT"

# Mitigate UDP Floods by limiting the number of UDP packets per second (PPS).
# ----------------------------------------------------------------
mitigate_udp_flood "-m limit --limit $UPL" "UDP" "ACCEPT"
mitigate_udp_flood "" "UDP LIMIT" "DROP"

# Allow limited ICMP traffic while blocking specific types of ICMP for improved security.
# ----------------------------------------------------------------
icmp_block "echo-request" '-m length --length 1:64 -m comment --comment "PING"' "ACCEPT"
icmp_block "" "-m limit --limit 2/s --limit-burst 2" "ACCEPT"
icmp_block "address-mask-request" "" "DROP"
icmp_block "router-solicitation" "" "DROP"
icmp_block "timestamp-request" "" "DROP"
icmp_block "redirect" "" "DROP"

# To relieve server load during UDP Floods, restrict the outgoing ICMP 'Port-Unreach' packets per second (PPS).
# ----------------------------------------------------------------
"$IP" -t raw -A OUTPUT -p icmp --icmp-type port-unreach -m limit --limit 7/m --limit-burst 2 -j ACCEPT
"$IP" -t raw -A OUTPUT -p icmp --icmp-type port-unreach -j DROP

# To relieve server load during ACK Floods, restrict the outgoing TCP RST packets per second (PPS).
# ----------------------------------------------------------------
"$IP" -t raw -A OUTPUT -p tcp --tcp-flags RST RST -m limit â€”limit 10/s -j ACCEPT
"$IP" -t raw -A OUTPUT -p tcp --tcp-flags RST RST -j DROP

# Enhance security and block basic attacks by filtering TCP packets with invalid flag combinations.
# If you're trying to optimize the ruleset, you can comment all except ALL/NONE and ALL/ALL.
# ----------------------------------------------------------------
tcp_filter "SYN,FIN SYN,FIN"
tcp_filter "SYN,RST SYN,RST"
tcp_filter "FIN,ACK FIN"
tcp_filter "ACK,URG URG"
tcp_filter "ACK,FIN FIN"
tcp_filter "ACK,PSH PSH"
tcp_filter "ALL NONE"
tcp_filter "ALL ALL"

# Safeguard against CPU overload during AMP DDoS attacks by limiting DNS/NTP packets per second (PPS).
# Also, drop certain other protocols that could be exploited in amplified attacks.
# ----------------------------------------------------------------
"$IP" -t raw -A PREROUTING -p udp --sport 123 -m limit --limit 3/m --limit-burst 1 -j ACCEPT
"$IP" -t raw -A PREROUTING -p udp --sport 53 -m limit --limit 70/m --limit-burst 4 -j ACCEPT
"$IP" -t raw -A PREROUTING -p udp -m multiport --sports 19,53,111,123,137,389,1900,2140,3702,5353,7001,9000,17185,37020,37810 -m comment --comment "AMPLIFICATION" -j DROP

# Discard TCP/UDP packets with invalid length to counter certain attacks.
# ----------------------------------------------------------------
"$IP" -t raw -A PREROUTING -p tcp -m length --length 0 -m comment --comment "INVALID LENGTH" -j DROP
"$IP" -t raw -A PREROUTING -p udp -m length --length 0:8 -m comment --comment "INVALID LENGTH" -j DROP

# Drop all invalid packets.
# Add "UNTRACKED" for additional protection. But this may cause problems!
# ----------------------------------------------------------------
"$IP" -t mangle -I PREROUTING -p all -m state --state INVALID -m comment --comment "INVALID PACKET BLOCK" -j DROP

# Restrict the number of connections per IP to mitigate the impact of Handshake and Slowloris attacks.
# ----------------------------------------------------------------
"$IP" -t mangle -A PREROUTING -p tcp -m connlimit --connlimit-above "$CL" -m comment --comment "CONNECTION LIMIT" -j "$CLA"

# Drop SYNs with src-port <1024 to prevent many attack types.
# ----------------------------------------------------------------
"$IP" -t raw -I PREROUTING -p tcp --syn ! --sport 1024:65535 -m comment --comment "SYN INVALID SPORT" -j DROP

# Drop new non-SYN TCP packets to mitigate common TCP attacks.
# If you're trying to optimize the ruleset, check this rule.
# ----------------------------------------------------------------
"$IP" -t mangle -I PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -m comment --comment "NEW TCP NOT SYN DROP" -j DROP

# Drop TCP packets with invalid MSS to mitigate certain attack types.
# ----------------------------------------------------------------
"$IP" -t mangle -I PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:63000 -m comment --comment "INVALID MSS" -j DROP

# Block specific Layer 3 protocols (ESP, GRE, AH, IGMP) to mitigate floods.
# Remove the rules if you require these protocols.
# ----------------------------------------------------------------
"$IP" -t raw -I PREROUTING -p esp -j "$PBA"
"$IP" -t raw -I PREROUTING -p gre -j "$PBA"
"$IP" -t raw -I PREROUTING -p ah -j "$PBA"
"$IP" -t raw -I PREROUTING -p igmp -j "$PBA"

# Improve security by dropping packets received on TEST-NET IP addresses.
# ----------------------------------------------------------------
"$IP" -t raw -A PREROUTING -p all -d 192.0.2.0/24 -j DROP

# Limit SYN/ICMPv6 packets per second (PPS) to mitigate certain IPv6 attacks, although they are not currently common.
# ----------------------------------------------------------------
"$IP6" -t raw -A PREROUTING -p icmpv6 -m limit --limit 3/s -j ACCEPT
"$IP6" -t raw -A PREROUTING -p icmpv6 -j DROP
"$IP6" -t raw -A PREROUTING -p tcp --syn -m limit --limit 7/s --limit-burst 4 -j ACCEPT
"$IP6" -t raw -A PREROUTING -p tcp --syn -j DROP

# Block some multicast IPs, censys IPs, shodan IPs...
# We use big hashsize, so it doesn't affects performance.
# ----------------------------------------------------------------
"$IPS" create blacklist nethash hashsize 260000
while IFS= read -r bad_ip; do
	"$IPS" add blacklist "$bad_ip"
done <"./blacklist"
"$IP" -t raw -A PREROUTING -m set --match-set blacklist src -j "$IBA"

# Advanced FireWall ruleset.

# To mitigate the impact of certain attacks, block suspicious strings from being processed or transmitted.
# ----------------------------------------------------------------
"$IP" -t raw -A PREROUTING -m string --algo bm --string "CRI" -j DROP
"$IP" -t raw -A PREROUTING -m string --algo bm --string "ddos" -j DROP
"$IP" -t raw -A PREROUTING -m string --algo bm --string "flood" -j DROP
"$IP" -t raw -A PREROUTING -m string --algo bm --string "HACKED" -j DROP
"$IP" -t raw -A PREROUTING -m string --algo bm --string "0x00000" -j DROP

# Additional beta rules.

# To strengthen security measures, block the specific leaked OVH Bypass payload from being processed or transmitted.
# "$IP" -t raw -A PREROUTING -m string --algo bm --string "\x77\x47\x5E\x27\x7A\x4E\x09\xF7\xC7\xC0\xE6" -j DROP

# Better protection for HTTPS/HTTP server(s):
# "$IP" -A INPUT -p tcp --dport 80 -m connlimit --connlimit-above 20 --connlimit-mask 32 -j DROP
# "$IP" -A INPUT -p tcp --dport 443 -m connlimit --connlimit-above 20 --connlimit-mask 32 -j DROP

# Block SIP server scanners:
# "$IP" -A INPUT -p udp --dport 5060 -m string --string "sipvicious" --algo bm -j DROP
# "$IP" -A INPUT -p udp --dport 5060 -m string --string "friendly-scanner" --algo bm -j DROP

# Protect SMTP server against weird packets:
# "$IP" -A INPUT -p tcp --dport 25 -m string --string "HELO" --algo bm --to 65535 -j DROP
# "$IP" -A INPUT -p tcp --dport 25 -m string --string "EHLO" --algo bm --to 65535 -j DROP

# Block torrents (useful against bittorrent amp):
# "$IP" -A INPUT -m string --string "BitTorrent" --algo bm -j DROP
# "$IP" -A INPUT -m string --string "uTorrent" --algo bm -j DROP

# Block SSLv2 and SSLv3 connections.
# "$IP" -A INPUT -p tcp --dport 443 -m string --string "SSLv2" --algo bm -j DROP
# "$IP" -A INPUT -p tcp --dport 443 -m string --string "SSLv3" --algo bm -j DROP

# Block HTTP TRACE method.
# "$IP" -A INPUT -p tcp --dport 80 -m string --string "TRACE" --algo bm -j DROP

# Block FTP SITE EXEC Command:
# "$IP" -A INPUT -p tcp --dport 21 -m string --string "SITE EXEC" --algo bm -j DROP

# Block SQLi attemps
# If your website under cloudflare you should change 3306 to HTTPS or HTTP.
# "$IP" -A INPUT -p tcp --dport 3306 -m string --string "union select" --algo bm -j DROP
# "$IP" -A INPUT -p tcp --dport 3306 -m string --string "information_schema" --algo bm -j DROP

# Advanced AntiSpoofing [NOT RECOMMENDED]:
# "$IP" -A INPUT -p all ! -d <ip_of_your_server> -j DROP

# SSH Whitelisting:
# "$IP" -t raw -I PREROUTING -p tcp --dport 22 ! -s <trusted_ip> -j DROP

# OpenVPN Whitelisting:
# "$IP" -t raw -I PREROUTING -p <tcp/udp> --dport 1194 ! -s <trusted_ip> -j DROP

# Block DNS zone transfers and recursion.
# "$IP" -t raw -A PREROUTING -p udp --dport 53 -m string --string "recursion" --algo bm -j DROP
# "$IP" -t raw -A PREROUTING -p tcp --dport 53 -m string --hex-string "|0d 0a 0d 0a|" --algo bm -j DROP

# Block advanced spoofing:
# "$IP" -A INPUT -m rpfilter -j DROP

# Port scan blocking:
# "$IP" -t raw -A PREROUTING -m state --state NEW -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s -j ACCEPT
# "$IP" -t raw -A PREROUTING -m state --state NEW -p tcp --tcp-flags SYN,ACK,FIN,RST RST -j DROP

# Geo blocking (in this rule, we block China, for example):
# "$IP" -t raw -I PREROUTING -m geoip --src-cc CN -j DROP

# Patch random attack, lol.
# "$IP" -A INPUT -p tcp --tcp-flags ALL SYN -m u32 --u32 "0>>22&0x3C@12>>26&0x3F=0" -j DROP

# SYNACK Reflection block.
# "$IP" -A INPUT -p tcp --syn -m recent --name blacklist --set -j DROP
# "$IP" -A INPUT -p tcp --tcp-flags ALL SYN,ACK -m recent --name blacklist --rcheck --seconds 60 --hitcount 10 -j DROP

# Advanced IP spoofing blocking + additional protection.
# "$IP" -t raw -A PREROUTING -m ipv4options --option ssrr -j DROP
# "$IP" -t raw -A PREROUTING -m ipv4options --option lsrr -j DROP
# "$IP" -t raw -A PREROUTING -m ipv4options --option rr -j DROP
# "$IP" -t raw -A PREROUTING -m ipv4options --option nop -j DROP
# "$IP" -t raw -A PREROUTING -m ipv4options --option security -j DROP
# "$IP" -t raw -A PREROUTING -m hl --hl-eq 1 -j DROP

# Patch random rare attack.
# "$IP" -t raw -A PREROUTING -p udp -m length --length 100:140 -m string --string "nAFS" --algo kmp --to 65535 -j DROP

# Prevent NTP Reflection attacks by blocking incoming NTP Reflection packets.
# "$IP" -t raw -A PREROUTING -p udp -m u32 --u32 "0>>22&0x3C@8&0xFF" -j DROP

# Enhance security by blocking known bypasses based on their specific patterns.
# "$IP" -t raw -A PREROUTING -p udp -m multiport --dports 16000:29000,"$SSH" -m string --to 75 --algo bm --string 'HTTP/1.1 200 OK' -j DROP
# "$IP" -t raw -A PREROUTING -p udp --dport 16000:29000 -m string --to 75 --algo bm --string 'HTTP/1.1 200 OK' -j DROP
# "$IP" -t raw -A PREROUTING -p udp -m udp -m string --hex-string "|7374640000000000|" --algo kmp --from 28 --to 29 -j DROP
# "$IP" -t raw -A PREROUTING -p udp -m u32 --u32 "6&0xFF=0,2:5,7:16,18:255" -j DROP
# "$IP" -t raw -A PREROUTING -m u32 --u32 "12&0xFFFF=0xFFFF" -j DROP
# "$IP" -t raw -A PREROUTING -m u32 --u32 "28&0x00000FF0=0xFEDFFFFF" -j DROP
# "$IP" -t raw -A PREROUTING -m string --algo bm --from 28 --to 29 --string "farewell" -j DROP
# "$IP" -t raw -A PREROUTING -p udp -m udp -m string --hex-string "|53414d50|" --algo kmp --from 28 --to 29 -j DROP

# Enhance security by blocking signatures of popular Command and Control (C2) sources.
# "$IP" -t raw -A PREROUTING -p udp -m u32 --u32 "2&0xFFFF=0x2:0x0100" -j DROP
# "$IP" -t raw -A PREROUTING -p udp -m u32 --u32 "12&0xFFFFFF00=0xC0A80F00" -j DROP
# "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK ACK -m length --length 52 -m string --algo bm --string "0x912e" -m state --state ESTABLISHED -j DROP

# Patch SYNOPT-ACK Attack.
# "$IP" -t raw -A PREROUTING -p tcp --sport 21 --dport 21 --tcp-flags SYN,ACK SYN,ACK -j DROP

# To enhance security, block certain exposed payloads from being processed or transmitted.
# "$IP" -t raw -A PREROUTING -p tcp -m length --length 40 -m string --algo bm --string "0xd3da" -m state --state ESTABLISHED -j DROP
# "$IP" -t raw -A PREROUTING -p tcp -m length --length 40 -m string --algo bm --string "0x912e" -m state --state ESTABLISHED -j DROP
# "$IP" -t raw -A PREROUTING -p tcp -m length --length 40 -m string --algo bm --string "0x0c54" -m state --state ESTABLISHED -j DROP
# "$IP" -t raw -A PREROUTING -p tcp -m length --length 40 -m string --algo bm --string "0x38d3" -m state --state ESTABLISHED -j DROP

# Enhance security by dropping HTTP requests with suspicious user agents.
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'python-requests' --algo kmp -j "$UBA"
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'benchmark' --algo kmp -j "$UBA"
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'MD5(' --algo kmp -j "$UBA"
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'censys' --algo kmp -j "$UBA"
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'inspect' --algo kmp -j "$UBA"
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'scanner' --algo kmp -j "$UBA"
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'shodan' --algo kmp -j "$UBA"

# Drop packets with popular SNMP-based attack signatures to mitigate SNMP attacks.
# "$IP" -t raw -A PREROUTING -p udp --sport 161 -m length --length 2536:1244 -j DROP

# Drop packets sent to DNS port but which are not DNS packets.
# You cam make multiple rules like that.
# "$IP" -t raw -A PREROUTING -p udp --dport 53 -m udp ! -m string --string "DNS" --algo bm --to 65535 -j ACCEPT

# Block heartbleed attack.
# "$IP" -t raw -A PREROUTING -p tcp --dport 443 -m u32 --u32 "52=0x18030000 && 56=0x00000000" -j DROP

# Block shellshock attack.
# "$IP" -t raw -A PREROUTING -p tcp --dport 80 -m string --algo bm --string '() {' -j DROP

# Extremely protect your SSH against handshake/socket methods.
# "$IP" -t mangle -A PREROUTING -p tcp --dport "$SSH" -m connlimit --connlimit-above 3 -j REJECT

# --------------------------------

# If you have added port-allowing rules to the script, uncomment the following two rules to enable logging to dmesg.
# The logging is limited to 5 messages per second.
# "$IP" -A INPUT -m limit --limit 5/m j LOG --log-prefix "[yuki-script] DROP:" --log-ip-options --log-tcp-options --log-tcp-sequence
# "$IP" -A INPUT -j DROP

# Sysctl.conf tweaks
# --------------------------------

echo -e "
#
# /etc/sysctl.conf - Configuration file for setting system variables
# See /etc/sysctl.d/ for additional system variables.
# See sysctl.conf (5) for information.
#

#kernel.domainname = example.com

#
# Tweaks by https://github.com/yuk1c/antiddos
#


# Set custom Netfilter CT timeouts.
# Helps in TCP DDoS mitigation.
# --------------------------------
 net.netfilter.nf_conntrack_tcp_timeout_last_ack = 10
 net.netfilter.nf_conntrack_tcp_timeout_close = 5
 net.netfilter.nf_conntrack_tcp_timeout_close_wait = 5
 net.netfilter.nf_conntrack_tcp_timeout_time_wait = 5
 net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 20
 net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 20
 net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 25
 net.netfilter.nf_conntrack_tcp_timeout_unacknowledged = 20
 net.netfilter.nf_conntrack_generic_timeout = 300
 net.netfilter.nf_conntrack_udp_timeout = 10
 net.netfilter.nf_conntrack_icmp_timeout = 2
 net.netfilter.nf_conntrack_icmpv6_timeout = 3

# Enable SYN-Cookies.
# Helps in SYN Flood DDoS mitigation.
# --------------------------------
 net.ipv4.tcp_syncookies = 1

# Set custom SYN/SYN-ACK retries count.
# Helps in TCP DDoS mitigation.
# --------------------------------
 net.ipv4.tcp_synack_retries = 1
 net.ipv4.tcp_syn_retries = 2

# Set custom NIC Buffers size.
# --------------------------------
 net.core.rmem_max = 33554432
 net.core.wmem_max = 33554432

# Use TCP MTU Probing when the kernel detects ICMP BH.
# --------------------------------
 net.ipv4.tcp_mtu_probing = 1

# Set a large route table size (for IPv4 & IPv6).
# --------------------------------
 net.ipv6.route.max_size = 2147483647
 net.ipv4.route.max_size = 2147483647

# Network security hardening.
# --------------------------------
 net.ipv4.conf.all.accept_redirects = 0
 net.ipv4.conf.all.secure_redirects = 0
 net.ipv4.conf.all.send_redirects = 0
 net.ipv4.conf.all.accept_source_route = 0
 net.ipv6.conf.all.accept_source_route = 0
 net.ipv6.conf.all.accept_ra = 0
 net.ipv4.conf.all.secure_redirects = 1
 net.ipv6.conf.all.drop_unsolicited_na = 1
 net.ipv6.conf.all.use_tempaddr = 2
 net.ipv4.conf.all.drop_unicast_in_l2_multicast = 1
 net.ipv6.conf.all.drop_unicast_in_l2_multicast = 1
 net.ipv6.conf.default.dad_transmits = 0
 net.ipv6.conf.default.autoconf = 0
 #net.ipv4.ip_forward = 0 # Disables ip_forward (blocks VPN/NAT)
 #net.ipv4.ip_no_pmtu_disc = 3 # Hardened PMTU Discover Mode (usually not needed)

# Prevent ARP Spoofing.
# --------------------------------
 net.ipv4.conf.all.drop_gratuitous_arp = 1
 net.ipv4.conf.all.arp_ignore = 1
 net.ipv4.conf.all.arp_filter = 1

# Disable IGMP Multicast reports.
# --------------------------------
 net.ipv4.igmp_link_local_mcast_reports = 0

# Overall security hardening.
# --------------------------------
 kernel.dmesg_restrict = 1
 kernel.kptr_restrict = 1
 fs.protected_symlinks = 1
 fs.protected_hardlinks = 1
 fs.protected_fifos = 2
 fs.protected_regular = 2
 kernel.unprivileged_bpf_disabled = 1
 kernel.unprivileged_userns_clone = 0
 kernel.printk = 3 3 3 3
 net.core.bpf_jit_harden = 2
 net.netfilter.nf_conntrack_helper = 0
 vm.unprivileged_userfaultfd = 0
 kernel.kexec_load_disabled = 1
 #kernel.sysrq = 0 # Disables sysrq (not recommended)

# Performance tuning.
# Set somaxconn to 2000000 if you have very powerful server.
# Your server will be able to handle 2 mil connections. 0_0
# Disabled checksum verification in NF because the NIC usually already calculates checksums.
# --------------------------------
 kernel.sched_tunable_scaling = 1
 kernel.shmmax = 268435456
 net.ipv4.tcp_tw_reuse = 1
 vm.swappiness = 20
 net.core.somaxconn = 32000
 net.ipv4.tcp_keepalive_probes = 5
 net.netfilter.nf_conntrack_checksum = 0

# Set max conntrack table size.
# --------------------------------
 net.nf_conntrack_max = 20971520
 net.netfilter.nf_conntrack_max = 20971520

# Enable ExecShield to block some remote attacks.
# --------------------------------
 kernel.exec-shield = 2

# Don't log bogus ICMP responses.
# --------------------------------
 net.ipv4.icmp_ignore_bogus_error_responses = 1

# Disable conntrack helper.
# --------------------------------
 net.netfilter.nf_conntrack_helper = 0

# Allow to use more ports as a s-ports.
# --------------------------------
 net.ipv4.ip_local_port_range=1024 65535

# Disable conntrack TCP Loose (we need this to use SYN Proxy).
# --------------------------------
 net.netfilter.nf_conntrack_tcp_loose = 0

# Reverse-path filter.
# You should set '1' to '2' if you're using an assymetric routing.
# --------------------------------
 net.ipv4.conf.all.rp_filter = 1

# Custom ratelimit for invalid TCP packets.
# --------------------------------
net.ipv4.tcp_invalid_ratelimit = 1000" >/etc/sysctl.conf

sysctl -p
ipset save
systemctl enable --now netfilter-persistent
clear

echo -e "${BYellow}"
echo -e "[âœ“] Script changes applied, but rules aren't saved.
Check the network now, and if it's fine - save the rules using 'sudo netfilter-persistent save'.\n"
echo -e "\nDrop policy blocks everything that isnt allowed."
echo -e "Allow needed TCP port with 'iptables-nft -A INPUT -p tcp --dport PORT -j ACCEPT'"
echo -e "For UDP port you can use 'iptables-nft -A INPUT -p udp --dport PORT -j ACCEPT'"
echo -e "Also you can check stats: 'iptables-nft -L -n -v'"

# Reset terminal color and exit.
tput sgr0
exit 0

# Wanna delete rule? Replace -A (or -I) with -D and apply!
